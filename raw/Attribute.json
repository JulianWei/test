{
  "alias": "",
  "ctors": [],
  "fields": [],
  "interfaces": [],
  "methods": [],
  "subtype": "CLASS",
  "name": "Attribute",
  "summary": "Attribute is a special class type which provides the ability to define meta-data for other ordinary types. Attribute inherits [Object](Object), but cannot be instantiated directly by \u0027new\u0027 operator. Its use is strictly limited at certain prescribed sites at class and member definition.\u003cbr\u003e\u003cbr\u003eAn attribute can contain zero or more fields:\u003cbr\u003e\u003cbr\u003e[code]\nattribute Copyright {\n  string name;\n  int year;\n}[code: end] And it\u0027s used with annotation syntax when defining other types:\u003cbr\u003e\u003cbr\u003e[code]\n[Copyright(name \u003d \"James Kucan\", year\u003d2010)]\nclass ServiceModel {\n  [Copyright(name \u003d \"Larson J. Fisher\", year\u003d2011)]\n  void report(){\n\n  }\n}[code: end] The usage of attributes, such as use-site and repeatability, can be controlled by [meta-attribute](System.AttributeType).\u003cbr\u003e\u003cbr\u003eJulian doesn\u0027t enforce the types for fields of attribute, nor what an initializer may contain. When loading a type, all the dependent Attribute types will be loaded ahead of non-Attribute types in a resolved order based their mutual dependencies. This, however, is a best-effort by the engine, which doesn\u0027t guarantee the success with regards to that loading order. In fact, due to the nature of attributes, it\u0027s possible to cause loading failure because of cross-dependency among attributes and other types. The avoid such failures, it\u0027s recommended that only primitive types and system types be used for both the field type and throughout the initializer.\u003cbr\u003e\u003cbr\u003eFor more detailed description on Attribute, see [Julian Tutorial].",
  "references": [
    {
      "moduleName": "System",
      "simpleName": "AttributeType",
      "dimension": 0
    }
  ]
}