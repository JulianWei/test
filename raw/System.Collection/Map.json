{
  "ctors": [
    {
      "params": [],
      "exceptions": [],
      "isStatic": false,
      "visibility": "PUBLIC",
      "summary": "Create a new map instance.",
      "references": []
    }
  ],
  "fields": [],
  "interfaces": [
    {
      "moduleName": "System.Collection",
      "simpleName": "Container",
      "dimension": 0
    }
  ],
  "methods": [
    {
      "returnType": {
        "summary": "",
        "type": {
          "simpleName": "Void",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [
        {
          "summary": "The key to the map.",
          "type": {
            "simpleName": "Object",
            "dimension": 0
          }
        },
        {
          "summary": "The value to store under this key. Can be null.",
          "type": {
            "simpleName": "Object",
            "dimension": 0
          }
        }
      ],
      "exceptions": [],
      "isStatic": false,
      "name": "put",
      "visibility": "PUBLIC",
      "summary": "Put a key/value pair into the map. The key\u0027s hashCode() is to calculate the storage location, and its equals() method is used to determine the uniqueness.",
      "references": []
    },
    {
      "returnType": {
        "summary": "true if the key exists; false otherwise.",
        "type": {
          "simpleName": "Bool",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [
        {
          "summary": "The key to the map.",
          "type": {
            "simpleName": "Object",
            "dimension": 0
          }
        }
      ],
      "exceptions": [],
      "isStatic": false,
      "name": "hasKey",
      "visibility": "PUBLIC",
      "summary": "Check if the specified key exists in the map, without getting the value associated with it.",
      "references": []
    },
    {
      "returnType": {
        "summary": "If the key existed, the value associated with this key; otherwise, null. Note if the valueis null this method cannot tell if a value of null has been removed or the key didn\u0027t exist. If such information is required, call [hasKey](#hasKey) beforehand.",
        "type": {
          "simpleName": "Object",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [
        {
          "summary": "The key to the map.",
          "type": {
            "simpleName": "Object",
            "dimension": 0
          }
        }
      ],
      "exceptions": [],
      "isStatic": false,
      "name": "remove",
      "visibility": "PUBLIC",
      "summary": "Remove the specified key from the the map.\u003cbr\u003e\u003cbr\u003e",
      "references": []
    },
    {
      "returnType": {
        "summary": "If the key existed, the value associated with this key; otherwise, null. Note if the valueis null this method cannot tell if a value of null has been retrieved or the key didn\u0027t exist. If such information is required, call [hasKey](#hasKey) beforehand.",
        "type": {
          "simpleName": "Object",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [
        {
          "summary": "The key to the map.",
          "type": {
            "simpleName": "Object",
            "dimension": 0
          }
        }
      ],
      "exceptions": [],
      "isStatic": false,
      "name": "get",
      "visibility": "PUBLIC",
      "summary": "Get the value from the the map by the specified key.\u003cbr\u003e\u003cbr\u003e",
      "references": []
    },
    {
      "returnType": {
        "summary": "",
        "type": {
          "simpleName": "Integer",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [],
      "exceptions": [],
      "isStatic": false,
      "name": "size",
      "visibility": "PUBLIC",
      "summary": "The size of map.",
      "references": []
    }
  ],
  "subtype": "CLASS",
  "name": "Map",
  "visibility": "PUBLIC",
  "summary": "A hash map to store data based on the calculated hash value, allowing fast element-targeting operation at O(1) cost.\u003cbr\u003e\u003cbr\u003eAn object stored in map will provide its hash through [Object.hashCode()](Object#hashCode()) method. A primitive value will convert is numeric value into an integer to be used as hash. For example, byte value simply promotes the value to integer, and a float value get floored to an integer.\u003cbr\u003e\u003cbr\u003eThe hashcode is only a means to locate the slot in the map, but doesn\u0027t have to be unique. The uniqueness is determined by [Object.equals()](Object#equals(Object)) method. When putting a value into a map, if the slot suggested by the hashcode is already occupied, Object.equals() is called between the new object and existing one. If the method returns true, the new object is not added; otherwise, the object will be added anyway. If there is more than one object using that slot, each of them will be compared against before the new object can be cleared of its uniqueness and added. The multiple objects stored on the same map slot are internally organized by a linked list. In best practice, try to make the hashcode as unique as possible to improve the performance, and always pay attention to equals() to ensure its proper functioning in determining the logical equality between two objects.\u003cbr\u003e\u003cbr\u003eJulian supports map operation at language level. Use indexer syntax to achieve easy access:\u003cbr\u003e\u003cbr\u003e[code]\n   map[key] \u003d value1;\n   var value2 \u003d map[key];[code: end]\u003cbr\u003e\u003cbr\u003eMap is iterable. Each value returned during iteration is an [Entry]. Example:\u003cbr\u003e\u003cbr\u003e[code]\n   for (var entry : map) {\n     Console.println(entry.key + \"\u003d\" + entry.value);\n   }[code: end]\u003cbr\u003e\u003cbr\u003eThe methods of this class are NOT thread safe.",
  "references": []
}