{
  "alias": "",
  "ctors": [],
  "fields": [
    {
      "type": {
        "simpleName": "Integer",
        "dimension": 0
      },
      "isConst": true,
      "isStatic": false,
      "name": "length",
      "visibility": "PUBLIC",
      "summary": "The length of this array. Note for multi-dimensional array this refers to the length of the first dimension.",
      "references": []
    }
  ],
  "interfaces": [],
  "methods": [
    {
      "returnType": {
        "summary": "The number of elements copied. This number is less than or equal to [the specified count](param: count).",
        "type": {
          "simpleName": "Integer",
          "dimension": 0
        }
      },
      "isAbstract": false,
      "params": [
        {
          "summary": "The source array.",
          "type": {
            "simpleName": "Array",
            "dimension": 0
          }
        },
        {
          "summary": "The offset at source array to start copy from. 0-based.",
          "type": {
            "simpleName": "Integer",
            "dimension": 0
          }
        },
        {
          "summary": "The target array.",
          "type": {
            "simpleName": "Array",
            "dimension": 0
          }
        },
        {
          "summary": "The offset at target array to start copy to. 0-based.",
          "type": {
            "simpleName": "Integer",
            "dimension": 0
          }
        },
        {
          "summary": "The total length to copy over",
          "type": {
            "simpleName": "Integer",
            "dimension": 0
          }
        }
      ],
      "exceptions": [
        {
          "summary": "if the parameters are not meeting the requirements, such astype being incompatible, values overlapping, illegal values or illegal combination thereof, of parametrers, etc.",
          "type": {
            "moduleName": "System.Lang",
            "simpleName": "RuntimeCheckException",
            "dimension": 0
          }
        }
      ],
      "isStatic": true,
      "name": "copy",
      "visibility": "PUBLIC",
      "summary": "Copy certain section of one array to that of another.",
      "references": []
    }
  ],
  "subtype": "CLASS",
  "name": "Array",
  "summary": "Array is an indexiable vector structure with direct language support. It inherits from [Object](Object), and is instantiated using new expression with a special grammar.\u003cbr\u003e\u003cbr\u003eTo declare an array of one or two dimentions,\u003cbr\u003e\u003cbr\u003e[code]\nint[] ia;\nstring[][] saa;[code: end] The [] grammar can be expanded to any degree.\u003cbr\u003e\u003cbr\u003eTo intialize an array, there are two ways. First an all-empty array can be initialized by specifying lengths at each dimension in a new expression,\u003cbr\u003e\u003cbr\u003e[code]\nint[] ia \u003d new int[3];\nstring[][] saa \u003d new string[2][10];[code: end] Alternatively an array initializer can be used to specify values at each index.\u003cbr\u003e\u003cbr\u003e[code]\nint[] ia \u003d new int[]{10, 20};[code: end] It should be noted that these two syntaxes cannot be mixed in any fashion.\u003cbr\u003e\u003cbr\u003eTo access an element on an array, use \u0027[]\u0027 syntax, a.k.a. indexer:\u003cbr\u003e\u003cbr\u003e[code]\nint i \u003d ia[2];\nia[f()+3] \u003d g();[code: end]\u003cbr\u003e\u003cbr\u003eArray is interatible. This mean one can use foreach grammar on an array:\u003cbr\u003e\u003cbr\u003e[code]\nfor(int i : ia) {\n  ...\n}[code: end]\u003cbr\u003e\u003cbr\u003eArray\u0027s length is immutable and fixed during initialization. To use a scalable structure consider [List](System.Collection.List).\u003cbr\u003e\u003cbr\u003eFor more detailed description on Array, see [Julian Tutorial].",
  "references": []
}